
Assi08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003d0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000558  08000558  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000558  08000558  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000558  08000558  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000558  08000558  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000558  08000558  00001558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800055c  0800055c  0000155c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000560  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000014df  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004d7  00000000  00000000  0000350d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d8  00000000  00000000  000039e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008c  00000000  00000000  00003ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180c9  00000000  00000000  00003b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000013ea  00000000  00000000  0001bc15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bd42  00000000  00000000  0001cfff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a8d41  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001ac  00000000  00000000  000a8d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a8f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005c  00000000  00000000  000a8f4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000540 	.word	0x08000540

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000540 	.word	0x08000540

080001c8 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80001d0:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <DelayMs+0x44>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80001d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000210 <DelayMs+0x48>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a0e      	ldr	r2, [pc, #56]	@ (8000214 <DelayMs+0x4c>)
 80001dc:	fba2 2303 	umull	r2, r3, r2, r3
 80001e0:	099b      	lsrs	r3, r3, #6
 80001e2:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	68ba      	ldr	r2, [r7, #8]
 80001e8:	fb02 f303 	mul.w	r3, r2, r3
 80001ec:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80001ee:	bf00      	nop
 80001f0:	4b06      	ldr	r3, [pc, #24]	@ (800020c <DelayMs+0x44>)
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	1ad2      	subs	r2, r2, r3
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d3f8      	bcc.n	80001f0 <DelayMs+0x28>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e0001000 	.word	0xe0001000
 8000210:	20000000 	.word	0x20000000
 8000214:	10624dd3 	.word	0x10624dd3

08000218 <main>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	SystemInit();
 800021e:	f000 f8a5 	bl	800036c <SystemInit>
	int16_t ccr = 0;
 8000222:	2300      	movs	r3, #0
 8000224:	80fb      	strh	r3, [r7, #6]
	SwitchInit();
 8000226:	f000 f855 	bl	80002d4 <SwitchInit>
	PWM_Init();
 800022a:	f000 f8d5 	bl	80003d8 <PWM_Init>
	while(1)
	{
		while(switch_flag == 0)
 800022e:	bf00      	nop
 8000230:	4b18      	ldr	r3, [pc, #96]	@ (8000294 <main+0x7c>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d0fb      	beq.n	8000230 <main+0x18>
			;
		DelayMs(300);
 8000238:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800023c:	f7ff ffc4 	bl	80001c8 <DelayMs>
			TIM8->CCR1 = ccr;
 8000240:	4a15      	ldr	r2, [pc, #84]	@ (8000298 <main+0x80>)
 8000242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000246:	6353      	str	r3, [r2, #52]	@ 0x34
			ccr+=10;
 8000248:	88fb      	ldrh	r3, [r7, #6]
 800024a:	330a      	adds	r3, #10
 800024c:	b29b      	uxth	r3, r3
 800024e:	80fb      	strh	r3, [r7, #6]
			switch_flag = 0;
 8000250:	4b10      	ldr	r3, [pc, #64]	@ (8000294 <main+0x7c>)
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
			if(ccr > 100)
 8000256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800025a:	2b64      	cmp	r3, #100	@ 0x64
 800025c:	dde7      	ble.n	800022e <main+0x16>
			{
				while(ccr >0)
 800025e:	e013      	b.n	8000288 <main+0x70>
				{
					while(switch_flag == 0)
 8000260:	bf00      	nop
 8000262:	4b0c      	ldr	r3, [pc, #48]	@ (8000294 <main+0x7c>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d0fb      	beq.n	8000262 <main+0x4a>
						;
					DelayMs(300);
 800026a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800026e:	f7ff ffab 	bl	80001c8 <DelayMs>
					TIM8->CCR1 = ccr;
 8000272:	4a09      	ldr	r2, [pc, #36]	@ (8000298 <main+0x80>)
 8000274:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000278:	6353      	str	r3, [r2, #52]	@ 0x34
					ccr-=10;
 800027a:	88fb      	ldrh	r3, [r7, #6]
 800027c:	3b0a      	subs	r3, #10
 800027e:	b29b      	uxth	r3, r3
 8000280:	80fb      	strh	r3, [r7, #6]
					switch_flag = 0;
 8000282:	4b04      	ldr	r3, [pc, #16]	@ (8000294 <main+0x7c>)
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
				while(ccr >0)
 8000288:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800028c:	2b00      	cmp	r3, #0
 800028e:	dce7      	bgt.n	8000260 <main+0x48>
		while(switch_flag == 0)
 8000290:	e7cd      	b.n	800022e <main+0x16>
 8000292:	bf00      	nop
 8000294:	20000020 	.word	0x20000020
 8000298:	40010400 	.word	0x40010400

0800029c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	db0b      	blt.n	80002c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	f003 021f 	and.w	r2, r3, #31
 80002b4:	4906      	ldr	r1, [pc, #24]	@ (80002d0 <__NVIC_EnableIRQ+0x34>)
 80002b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ba:	095b      	lsrs	r3, r3, #5
 80002bc:	2001      	movs	r0, #1
 80002be:	fa00 f202 	lsl.w	r2, r0, r2
 80002c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr
 80002d0:	e000e100 	.word	0xe000e100

080002d4 <SwitchInit>:


#include "switch_inter.h"

void SwitchInit(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002d8:	4b16      	ldr	r3, [pc, #88]	@ (8000334 <SwitchInit+0x60>)
 80002da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002dc:	4a15      	ldr	r2, [pc, #84]	@ (8000334 <SwitchInit+0x60>)
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIO_SWITCH->MODER &= ~BV((GPIO_SWITCH_PIN>>1) +1);
 80002e4:	4b14      	ldr	r3, [pc, #80]	@ (8000338 <SwitchInit+0x64>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a13      	ldr	r2, [pc, #76]	@ (8000338 <SwitchInit+0x64>)
 80002ea:	f023 0302 	bic.w	r3, r3, #2
 80002ee:	6013      	str	r3, [r2, #0]
	GPIO_SWITCH->MODER &= ~BV(GPIO_SWITCH_PIN>>1);
 80002f0:	4b11      	ldr	r3, [pc, #68]	@ (8000338 <SwitchInit+0x64>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a10      	ldr	r2, [pc, #64]	@ (8000338 <SwitchInit+0x64>)
 80002f6:	f023 0301 	bic.w	r3, r3, #1
 80002fa:	6013      	str	r3, [r2, #0]

	GPIO_SWITCH->PUPDR &= ~(((GPIO_SWITCH_PIN>>1) +1) | (GPIO_SWITCH_PIN>>1));
 80002fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000338 <SwitchInit+0x64>)
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	4a0d      	ldr	r2, [pc, #52]	@ (8000338 <SwitchInit+0x64>)
 8000302:	f023 0301 	bic.w	r3, r3, #1
 8000306:	60d3      	str	r3, [r2, #12]

	//Interrupt initialization
	EXTI->FTSR |= BV(SWITCH_EXTI);
 8000308:	4b0c      	ldr	r3, [pc, #48]	@ (800033c <SwitchInit+0x68>)
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	4a0b      	ldr	r2, [pc, #44]	@ (800033c <SwitchInit+0x68>)
 800030e:	f043 0301 	orr.w	r3, r3, #1
 8000312:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= BV(SWITCH_EXTI);
 8000314:	4b09      	ldr	r3, [pc, #36]	@ (800033c <SwitchInit+0x68>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a08      	ldr	r2, [pc, #32]	@ (800033c <SwitchInit+0x68>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]
	SYSCFG->EXTICR[0] = ~(BV(3) | BV(2) | BV(1) | BV(0));
 8000320:	4b07      	ldr	r3, [pc, #28]	@ (8000340 <SwitchInit+0x6c>)
 8000322:	f06f 020f 	mvn.w	r2, #15
 8000326:	609a      	str	r2, [r3, #8]
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000328:	2006      	movs	r0, #6
 800032a:	f7ff ffb7 	bl	800029c <__NVIC_EnableIRQ>
}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40023800 	.word	0x40023800
 8000338:	40020000 	.word	0x40020000
 800033c:	40013c00 	.word	0x40013c00
 8000340:	40013800 	.word	0x40013800

08000344 <EXTI0_IRQHandler>:
volatile uint32_t switch_flag = 0;
volatile int count = 0;


void EXTI0_IRQHandler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0

EXTI->PR |= BV(SWITCH_EXTI);
 8000348:	4b06      	ldr	r3, [pc, #24]	@ (8000364 <EXTI0_IRQHandler+0x20>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	4a05      	ldr	r2, [pc, #20]	@ (8000364 <EXTI0_IRQHandler+0x20>)
 800034e:	f043 0301 	orr.w	r3, r3, #1
 8000352:	6153      	str	r3, [r2, #20]

  switch_flag = 1;
 8000354:	4b04      	ldr	r3, [pc, #16]	@ (8000368 <EXTI0_IRQHandler+0x24>)
 8000356:	2201      	movs	r2, #1
 8000358:	601a      	str	r2, [r3, #0]
}
 800035a:	bf00      	nop
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	40013c00 	.word	0x40013c00
 8000368:	20000020 	.word	0x20000020

0800036c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  DWT_Init();
 8000370:	f000 f802 	bl	8000378 <DWT_Init>
}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}

08000378 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800037c:	4b14      	ldr	r3, [pc, #80]	@ (80003d0 <DWT_Init+0x58>)
 800037e:	68db      	ldr	r3, [r3, #12]
 8000380:	4a13      	ldr	r2, [pc, #76]	@ (80003d0 <DWT_Init+0x58>)
 8000382:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000386:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000388:	4b11      	ldr	r3, [pc, #68]	@ (80003d0 <DWT_Init+0x58>)
 800038a:	68db      	ldr	r3, [r3, #12]
 800038c:	4a10      	ldr	r2, [pc, #64]	@ (80003d0 <DWT_Init+0x58>)
 800038e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000392:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000394:	4b0f      	ldr	r3, [pc, #60]	@ (80003d4 <DWT_Init+0x5c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a0e      	ldr	r2, [pc, #56]	@ (80003d4 <DWT_Init+0x5c>)
 800039a:	f023 0301 	bic.w	r3, r3, #1
 800039e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80003a0:	4b0c      	ldr	r3, [pc, #48]	@ (80003d4 <DWT_Init+0x5c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a0b      	ldr	r2, [pc, #44]	@ (80003d4 <DWT_Init+0x5c>)
 80003a6:	f043 0301 	orr.w	r3, r3, #1
 80003aa:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80003ac:	4b09      	ldr	r3, [pc, #36]	@ (80003d4 <DWT_Init+0x5c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80003b2:	bf00      	nop
    __ASM volatile ("NOP");
 80003b4:	bf00      	nop
    __ASM volatile ("NOP");
 80003b6:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80003b8:	4b06      	ldr	r3, [pc, #24]	@ (80003d4 <DWT_Init+0x5c>)
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	bf0c      	ite	eq
 80003c0:	2301      	moveq	r3, #1
 80003c2:	2300      	movne	r3, #0
 80003c4:	b2db      	uxtb	r3, r3
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	e000edf0 	.word	0xe000edf0
 80003d4:	e0001000 	.word	0xe0001000

080003d8 <PWM_Init>:


#include "timer_pwm.h"

void PWM_Init(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80003dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000498 <PWM_Init+0xc0>)
 80003de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e0:	4a2d      	ldr	r2, [pc, #180]	@ (8000498 <PWM_Init+0xc0>)
 80003e2:	f043 0304 	orr.w	r3, r3, #4
 80003e6:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOC->MODER |= BV(6*2+1);
 80003e8:	4b2c      	ldr	r3, [pc, #176]	@ (800049c <PWM_Init+0xc4>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a2b      	ldr	r2, [pc, #172]	@ (800049c <PWM_Init+0xc4>)
 80003ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003f2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~BV(6*2);
 80003f4:	4b29      	ldr	r3, [pc, #164]	@ (800049c <PWM_Init+0xc4>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a28      	ldr	r2, [pc, #160]	@ (800049c <PWM_Init+0xc4>)
 80003fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003fe:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[0] |= BV(24) | BV(25);
 8000400:	4b26      	ldr	r3, [pc, #152]	@ (800049c <PWM_Init+0xc4>)
 8000402:	6a1b      	ldr	r3, [r3, #32]
 8000404:	4a25      	ldr	r2, [pc, #148]	@ (800049c <PWM_Init+0xc4>)
 8000406:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 800040a:	6213      	str	r3, [r2, #32]

	//PWM Setup
	RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 800040c:	4b22      	ldr	r3, [pc, #136]	@ (8000498 <PWM_Init+0xc0>)
 800040e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000410:	4a21      	ldr	r2, [pc, #132]	@ (8000498 <PWM_Init+0xc0>)
 8000412:	f043 0302 	orr.w	r3, r3, #2
 8000416:	6453      	str	r3, [r2, #68]	@ 0x44
	TIM8->ARR = ARR_VAL;
 8000418:	4b21      	ldr	r3, [pc, #132]	@ (80004a0 <PWM_Init+0xc8>)
 800041a:	2264      	movs	r2, #100	@ 0x64
 800041c:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM8->CCR1 = 0;
 800041e:	4b20      	ldr	r3, [pc, #128]	@ (80004a0 <PWM_Init+0xc8>)
 8000420:	2200      	movs	r2, #0
 8000422:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM8->CCMR1 &= ~(TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC1S_1);
 8000424:	4b1e      	ldr	r3, [pc, #120]	@ (80004a0 <PWM_Init+0xc8>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a1d      	ldr	r2, [pc, #116]	@ (80004a0 <PWM_Init+0xc8>)
 800042a:	f023 0303 	bic.w	r3, r3, #3
 800042e:	6193      	str	r3, [r2, #24]
	TIM8->CCER &= ~TIM_CCER_CC1P;
 8000430:	4b1b      	ldr	r3, [pc, #108]	@ (80004a0 <PWM_Init+0xc8>)
 8000432:	6a1b      	ldr	r3, [r3, #32]
 8000434:	4a1a      	ldr	r2, [pc, #104]	@ (80004a0 <PWM_Init+0xc8>)
 8000436:	f023 0302 	bic.w	r3, r3, #2
 800043a:	6213      	str	r3, [r2, #32]
	TIM8->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;
 800043c:	4b18      	ldr	r3, [pc, #96]	@ (80004a0 <PWM_Init+0xc8>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a17      	ldr	r2, [pc, #92]	@ (80004a0 <PWM_Init+0xc8>)
 8000442:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000446:	6193      	str	r3, [r2, #24]
	TIM8->CCMR1 |= TIM_CCMR1_OC1PE;
 8000448:	4b15      	ldr	r3, [pc, #84]	@ (80004a0 <PWM_Init+0xc8>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a14      	ldr	r2, [pc, #80]	@ (80004a0 <PWM_Init+0xc8>)
 800044e:	f043 0308 	orr.w	r3, r3, #8
 8000452:	6193      	str	r3, [r2, #24]
	TIM8->CR1 |= TIM_CR1_ARPE;
 8000454:	4b12      	ldr	r3, [pc, #72]	@ (80004a0 <PWM_Init+0xc8>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a11      	ldr	r2, [pc, #68]	@ (80004a0 <PWM_Init+0xc8>)
 800045a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800045e:	6013      	str	r3, [r2, #0]
	TIM8->CR1 &= ~(TIM_CR1_CMS_0 | TIM_CR1_CMS_1);
 8000460:	4b0f      	ldr	r3, [pc, #60]	@ (80004a0 <PWM_Init+0xc8>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a0e      	ldr	r2, [pc, #56]	@ (80004a0 <PWM_Init+0xc8>)
 8000466:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800046a:	6013      	str	r3, [r2, #0]
	TIM8->CCER |= TIM_CCER_CC1E;
 800046c:	4b0c      	ldr	r3, [pc, #48]	@ (80004a0 <PWM_Init+0xc8>)
 800046e:	6a1b      	ldr	r3, [r3, #32]
 8000470:	4a0b      	ldr	r2, [pc, #44]	@ (80004a0 <PWM_Init+0xc8>)
 8000472:	f043 0301 	orr.w	r3, r3, #1
 8000476:	6213      	str	r3, [r2, #32]
	TIM8->BDTR |= TIM_BDTR_MOE;
 8000478:	4b09      	ldr	r3, [pc, #36]	@ (80004a0 <PWM_Init+0xc8>)
 800047a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800047c:	4a08      	ldr	r2, [pc, #32]	@ (80004a0 <PWM_Init+0xc8>)
 800047e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000482:	6453      	str	r3, [r2, #68]	@ 0x44
	TIM8->CR1 |= TIM_CR1_CEN;
 8000484:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <PWM_Init+0xc8>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a05      	ldr	r2, [pc, #20]	@ (80004a0 <PWM_Init+0xc8>)
 800048a:	f043 0301 	orr.w	r3, r3, #1
 800048e:	6013      	str	r3, [r2, #0]
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	40023800 	.word	0x40023800
 800049c:	40020800 	.word	0x40020800
 80004a0:	40010400 	.word	0x40010400

080004a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004a4:	480d      	ldr	r0, [pc, #52]	@ (80004dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004a8:	f7ff ff60 	bl	800036c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004ac:	480c      	ldr	r0, [pc, #48]	@ (80004e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80004ae:	490d      	ldr	r1, [pc, #52]	@ (80004e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004b0:	4a0d      	ldr	r2, [pc, #52]	@ (80004e8 <LoopForever+0xe>)
  movs r3, #0
 80004b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b4:	e002      	b.n	80004bc <LoopCopyDataInit>

080004b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ba:	3304      	adds	r3, #4

080004bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c0:	d3f9      	bcc.n	80004b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004c2:	4a0a      	ldr	r2, [pc, #40]	@ (80004ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80004c4:	4c0a      	ldr	r4, [pc, #40]	@ (80004f0 <LoopForever+0x16>)
  movs r3, #0
 80004c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c8:	e001      	b.n	80004ce <LoopFillZerobss>

080004ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004cc:	3204      	adds	r2, #4

080004ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d0:	d3fb      	bcc.n	80004ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004d2:	f000 f811 	bl	80004f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004d6:	f7ff fe9f 	bl	8000218 <main>

080004da <LoopForever>:

LoopForever:
  b LoopForever
 80004da:	e7fe      	b.n	80004da <LoopForever>
  ldr   r0, =_estack
 80004dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004e8:	08000560 	.word	0x08000560
  ldr r2, =_sbss
 80004ec:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004f0:	20000024 	.word	0x20000024

080004f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f4:	e7fe      	b.n	80004f4 <ADC_IRQHandler>
	...

080004f8 <__libc_init_array>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	4d0d      	ldr	r5, [pc, #52]	@ (8000530 <__libc_init_array+0x38>)
 80004fc:	4c0d      	ldr	r4, [pc, #52]	@ (8000534 <__libc_init_array+0x3c>)
 80004fe:	1b64      	subs	r4, r4, r5
 8000500:	10a4      	asrs	r4, r4, #2
 8000502:	2600      	movs	r6, #0
 8000504:	42a6      	cmp	r6, r4
 8000506:	d109      	bne.n	800051c <__libc_init_array+0x24>
 8000508:	4d0b      	ldr	r5, [pc, #44]	@ (8000538 <__libc_init_array+0x40>)
 800050a:	4c0c      	ldr	r4, [pc, #48]	@ (800053c <__libc_init_array+0x44>)
 800050c:	f000 f818 	bl	8000540 <_init>
 8000510:	1b64      	subs	r4, r4, r5
 8000512:	10a4      	asrs	r4, r4, #2
 8000514:	2600      	movs	r6, #0
 8000516:	42a6      	cmp	r6, r4
 8000518:	d105      	bne.n	8000526 <__libc_init_array+0x2e>
 800051a:	bd70      	pop	{r4, r5, r6, pc}
 800051c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000520:	4798      	blx	r3
 8000522:	3601      	adds	r6, #1
 8000524:	e7ee      	b.n	8000504 <__libc_init_array+0xc>
 8000526:	f855 3b04 	ldr.w	r3, [r5], #4
 800052a:	4798      	blx	r3
 800052c:	3601      	adds	r6, #1
 800052e:	e7f2      	b.n	8000516 <__libc_init_array+0x1e>
 8000530:	08000558 	.word	0x08000558
 8000534:	08000558 	.word	0x08000558
 8000538:	08000558 	.word	0x08000558
 800053c:	0800055c 	.word	0x0800055c

08000540 <_init>:
 8000540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000542:	bf00      	nop
 8000544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000546:	bc08      	pop	{r3}
 8000548:	469e      	mov	lr, r3
 800054a:	4770      	bx	lr

0800054c <_fini>:
 800054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054e:	bf00      	nop
 8000550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000552:	bc08      	pop	{r3}
 8000554:	469e      	mov	lr, r3
 8000556:	4770      	bx	lr
